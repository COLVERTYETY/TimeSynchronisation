/* Automatically generated nanopb header */
/* Generated by nanopb-1.0.0-dev */

#ifndef PB_MESSAGES_PB_H_INCLUDED
#define PB_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _MessageType {
    MessageType_UNKNOWN = 0,
    MessageType_OTHER = 1,
    MessageType_PING = 2,
    MessageType_TWRTS = 3,
    MessageType_REQUWB = 4
} MessageType;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(128) BaseMessage_payload_t;
typedef struct _BaseMessage {
    MessageType type; /* Common field to identify the message type */
    BaseMessage_payload_t payload; /* Encoded payload for the actual message */
} BaseMessage;

typedef struct _Ping {
    uint32_t counter;
} Ping;

typedef struct _Twrts {
    uint64_t uwb_poll_tx; /* DW3000 TS */
    uint64_t mcu_poll_tx; /* MCU TS */
    uint64_t uwb_resp_rx; /* DW3000 TS */
    uint64_t mcu_resp_rx; /* MCU TS */
    uint64_t uwb_resp_tx; /* DW3000 TS */
    uint64_t mcu_resp_tx; /* MCU TS */
    uint64_t uwb_poll_rx; /* DW3000 TS */
    uint64_t mcu_poll_rx; /* MCU TS */
    uint64_t uwb_final_tx; /* DW3000 TS */
    uint64_t mcu_final_tx; /* MCU TS */
    uint64_t uwb_final_rx; /* DW3000 TS */
    uint64_t mcu_final_rx; /* MCU TS */
    uint32_t SN; /* sequence number */
    uint32_t AN; /* anchor number */
    double distance; /* distance in meters */
    bool is_initiator; /* true if this is a response to a TWR message */
    bool is_SS; /* true if this is a response to a TWR message */
} Twrts;

typedef struct _Requwb {
    uint32_t AN; /* anchor number */
    uint32_t SN; /* sequence number */
    uint32_t amount; /* amount of messages to be sent */
    bool is_response; /* true if this is a response to a RequWB message */
    uint32_t delay; /* delay in microseconds */
} Requwb;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _MessageType_MIN MessageType_UNKNOWN
#define _MessageType_MAX MessageType_REQUWB
#define _MessageType_ARRAYSIZE ((MessageType)(MessageType_REQUWB+1))

#define BaseMessage_type_ENUMTYPE MessageType





/* Initializer values for message structs */
#define BaseMessage_init_default                 {_MessageType_MIN, {0, {0}}}
#define Ping_init_default                        {0}
#define Twrts_init_default                       {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Requwb_init_default                      {0, 0, 0, 0, 0}
#define BaseMessage_init_zero                    {_MessageType_MIN, {0, {0}}}
#define Ping_init_zero                           {0}
#define Twrts_init_zero                          {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}
#define Requwb_init_zero                         {0, 0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define BaseMessage_type_tag                     1
#define BaseMessage_payload_tag                  2
#define Ping_counter_tag                         1
#define Twrts_uwb_poll_tx_tag                    1
#define Twrts_mcu_poll_tx_tag                    2
#define Twrts_uwb_resp_rx_tag                    3
#define Twrts_mcu_resp_rx_tag                    4
#define Twrts_uwb_resp_tx_tag                    5
#define Twrts_mcu_resp_tx_tag                    6
#define Twrts_uwb_poll_rx_tag                    7
#define Twrts_mcu_poll_rx_tag                    8
#define Twrts_uwb_final_tx_tag                   9
#define Twrts_mcu_final_tx_tag                   10
#define Twrts_uwb_final_rx_tag                   11
#define Twrts_mcu_final_rx_tag                   12
#define Twrts_SN_tag                             13
#define Twrts_AN_tag                             14
#define Twrts_distance_tag                       15
#define Twrts_is_initiator_tag                   16
#define Twrts_is_SS_tag                          17
#define Requwb_AN_tag                            1
#define Requwb_SN_tag                            2
#define Requwb_amount_tag                        3
#define Requwb_is_response_tag                   4
#define Requwb_delay_tag                         5

/* Struct field encoding specification for nanopb */
#define BaseMessage_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, BYTES,    payload,           2)
#define BaseMessage_CALLBACK NULL
#define BaseMessage_DEFAULT NULL

#define Ping_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   counter,           1)
#define Ping_CALLBACK NULL
#define Ping_DEFAULT NULL

#define Twrts_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT64,   uwb_poll_tx,       1) \
X(a, STATIC,   SINGULAR, UINT64,   mcu_poll_tx,       2) \
X(a, STATIC,   SINGULAR, UINT64,   uwb_resp_rx,       3) \
X(a, STATIC,   SINGULAR, UINT64,   mcu_resp_rx,       4) \
X(a, STATIC,   SINGULAR, UINT64,   uwb_resp_tx,       5) \
X(a, STATIC,   SINGULAR, UINT64,   mcu_resp_tx,       6) \
X(a, STATIC,   SINGULAR, UINT64,   uwb_poll_rx,       7) \
X(a, STATIC,   SINGULAR, UINT64,   mcu_poll_rx,       8) \
X(a, STATIC,   SINGULAR, UINT64,   uwb_final_tx,      9) \
X(a, STATIC,   SINGULAR, UINT64,   mcu_final_tx,     10) \
X(a, STATIC,   SINGULAR, UINT64,   uwb_final_rx,     11) \
X(a, STATIC,   SINGULAR, UINT64,   mcu_final_rx,     12) \
X(a, STATIC,   SINGULAR, UINT32,   SN,               13) \
X(a, STATIC,   SINGULAR, UINT32,   AN,               14) \
X(a, STATIC,   SINGULAR, DOUBLE,   distance,         15) \
X(a, STATIC,   SINGULAR, BOOL,     is_initiator,     16) \
X(a, STATIC,   SINGULAR, BOOL,     is_SS,            17)
#define Twrts_CALLBACK NULL
#define Twrts_DEFAULT NULL

#define Requwb_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   AN,                1) \
X(a, STATIC,   SINGULAR, UINT32,   SN,                2) \
X(a, STATIC,   SINGULAR, UINT32,   amount,            3) \
X(a, STATIC,   SINGULAR, BOOL,     is_response,       4) \
X(a, STATIC,   SINGULAR, UINT32,   delay,             5)
#define Requwb_CALLBACK NULL
#define Requwb_DEFAULT NULL

extern const pb_msgdesc_t BaseMessage_msg;
extern const pb_msgdesc_t Ping_msg;
extern const pb_msgdesc_t Twrts_msg;
extern const pb_msgdesc_t Requwb_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define BaseMessage_fields &BaseMessage_msg
#define Ping_fields &Ping_msg
#define Twrts_fields &Twrts_msg
#define Requwb_fields &Requwb_msg

/* Maximum encoded size of messages (where known) */
#define BaseMessage_size                         133
#define MESSAGES_PB_H_MAX_SIZE                   Twrts_size
#define Ping_size                                6
#define Requwb_size                              26
#define Twrts_size                               159

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
